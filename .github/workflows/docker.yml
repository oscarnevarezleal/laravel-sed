name: Docker

on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

env:
  IMAGE_NAME: laravel-sed

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Build, and tag
        id: build-image
        env:
          IMAGE_TAG: ${{ github.sha }}
        run: |
          export USER_ID=$(id -u)
          export GROUP_ID=$(id -g)
          export CURRENT_UID=$USER_ID:$GROUP_ID
          # Build a docker container and
          # tag it.
          docker build --build-arg USER_ID=$USER_ID --build-arg GROUP_ID=$GROUP_ID -t larased .
          # Let's grab the latest version of a laravel application to test against
          composer create-project --prefer-dist laravel/laravel app
          # Run
          docker run --rm -v `pwd`/app:/var/app:ro larased --help
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: build

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: |
        export USER_ID=$(id -u)
        export GROUP_ID=$(id -g)
        export CURRENT_UID=$USER_ID:$GROUP_ID
        # Build a docker container and
        # tag it.
        docker build --build-arg USER_ID=$USER_ID --build-arg GROUP_ID=$GROUP_ID --tag $IMAGE_NAME .

      - name: Log into registry
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION